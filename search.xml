<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>组合博弈问题基础知识</title>
    <url>/2022/12/01/%E7%AE%80%E5%8D%95%E7%9A%84%E7%BB%84%E5%90%88%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>欢迎来到我的博客，在这篇博客中我将介绍一些关于组合博弈问题的入门知识，以下是我搜集到的资料汇总：</p>
<h2 id="一、一些基本概念"><a href="#一、一些基本概念" class="headerlink" title="一、一些基本概念"></a>一、一些基本概念</h2><span id="more"></span>
<h3 id="一类组合博弈游戏的特点"><a href="#一类组合博弈游戏的特点" class="headerlink" title="一类组合博弈游戏的特点"></a>一类组合博弈游戏的特点</h3><p>(1).有两个玩家。<br>(2).游戏的操作状态是一个有限的集合（可以全部枚举出来）。<br>(3).双方轮流操作。<br>(4).双方的每次操作必须符合游戏规定。<br>(5).当一方不能将游戏继续进行时，游戏结束，同时对方为获胜方。<br>(6).无论如何操作，游戏总能在有限次操作后结束。   </p>
<h3 id="必败点与必胜点概念"><a href="#必败点与必胜点概念" class="headerlink" title="必败点与必胜点概念"></a>必败点与必胜点概念</h3><p>必败点（P点）：前一个选手(Previous player)将获胜的位置。<br>必胜点（N点）：下一个选手(Next player)将获胜的位置。</p>
<h3 id="必败点与必胜点的特点"><a href="#必败点与必胜点的特点" class="headerlink" title="必败点与必胜点的特点"></a>必败点与必胜点的特点</h3><p>(1).所有的终结点（游戏已经结束的点）都是必败点。<br>(2).从任何必胜点操作，至少有一种方法可以进入必败点。<br>(3).无论如何操作，从必败点都能进入必胜点。</p>
<h3 id="简单取子游戏"><a href="#简单取子游戏" class="headerlink" title="简单取子游戏"></a>简单取子游戏</h3><p>游戏描述：有两个玩家轮流取一堆牌（这堆牌的数量有限且确定，比如说12张），每个人每次只能取1张,2张或者2张扑克牌，扑克牌取完游戏结束，取走最后一张牌的人获胜。<br>简单取子游戏的算法实现：<br>（1）将所有终结点标为必败点。<br>（2）将所有一步能进入必败点的位置标记为必胜点。<br>（3）如果从某个点开始的所有一步操作都只能进入必胜点，则将此点标记为必败点。<br>（4）如果在步骤三中未能找到新的必败点，则算法终止，否则返回步骤（2）。<br>通过这种方式我们就可以确定每个点是必败点还是必胜点啦！    </p>
<h2 id="二、Nim游戏"><a href="#二、Nim游戏" class="headerlink" title="二、Nim游戏"></a>二、Nim游戏</h2><p>&ensp;&ensp;如果我们将牌的堆数变成若干堆（有限），玩家每次只能在一个牌堆中取牌，且取牌的数量可以是1~$n_i$（$n_i$为TA所选的这堆牌的当前牌数），玩家轮流操作，直到一方不可以继续取牌游戏结束，最后一次取牌的玩家获胜，这样这个游戏就变成了Nim游戏。<br>&ensp;&ensp;要想解决这个问题，我们要引入一个概念，称为nim-sum(按位异或的运算)。<br>定义：$(x_0···x_m)_2$和$(y_0···y_m)_2$的nim~sum是$(z_0···z_m)_2$，我们表示成：$(x_0···x_m)_2\oplus(y_0···y_m)_2=(z_0···z_m)_2$，其中$z_k=(x_k+y_k)(mod\quad2),k=0···m,$例如$(1011)_2\oplus(101)_2=(1110)_2$<br>我们有如下定理：</p>
<h3 id="定理："><a href="#定理：" class="headerlink" title="定理："></a>定理：</h3><p>&ensp;&ensp;对于nim游戏的某个位置$(x_1,···,x_m)\quad$其中$x_i$为第$i$堆当前的牌数，当且仅当它的各部分nim-sum为0时。(即$x_1 \oplus x_2 \oplus ···\oplus x_m =0$)时，则当前位于必败点。   </p>
<h3 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h3><p>（1）首先对于终结点（0,0,···，0）的nim-sum为0，满足定理一。<br>（2）对于任意nim-sum不为0的状态，我们总是可以将其通过一次取牌变为0，做法就是根据我们nim-sum二进制值的首位1所对应堆的二进制的那一位，找到那一位为1的堆（这样的堆肯定存在，不然nim-sum首位的1是哪里来的呢？），这些堆就是符合条件的堆，我们就可以通过取这些堆的牌来将nim-sum变成0。取法：根据nim-sum的值，我们把nim-sum为1的所有位所对应的我们选的堆的二进制位改变（所对应的位若为1则变成0，若为0则变成1）。<br>&ensp;&ensp;<em>至于为什么一定要在这样的堆中取，因为很容易发现如果根据nim-sum修改不满足的堆的二进制数，此数反而变大了，即堆的牌数变大，这显然是不可能的。</em><br>（3）对于nim-sum为0点，不论怎么取牌，取完之后的nim-sum一定不为0。（因为改变了一堆牌的二进制位，nim-sum也一定变了）。    </p>
<p>我可能表达的不是很清楚，下面通过个具体例子说明：<br>比如我们现在有四堆牌，牌数分别为11,10,7，我们知道：11=$(1011)_2，10=(1010)_2，7=(111)_2$，<br>我们进行按位异或计算nim-sum:   </p>
<script type="math/tex; mode=display">
\oplus
\left|
    \begin{array}{ccc}
        1 & 0 & 1 & 1\\\\
        1 & 0 & 1 & 0\\\\  
        0 & 1(目标堆) & 1 & 1\\
        ——&——&——&——\\
        0 & 1(首位1) & 1 & 0    
    \end{array}
\right|</script><p>&ensp;&ensp;可得nim-sum的结果为$(0110)_2=6$,nim-sum的结果不为0，所以是先手必胜的。那假设我们是先手玩家，我们应该如何取牌呢？根据之前的证明，我们应该通过取牌将nim-sum变为0，由于当前nim-sum是$(0110)_2$首位的1所对应的堆的那一位也是1的堆只有$(0111)_2=7$这一堆。根据nim-sum的值，我们把nim-sum为1的所有位所对应的我们选的堆的二进制位改变（所对应的位若为1变成0，若为0则变成1）即只需将$(0111)_2=7$这堆改为$(0001)_2=1$即可使nim-sum的值为0（倘若我们取其他堆的牌，比如$(1011)_2=11$这堆，我们发现改过之后该堆的二进制值为$(1101)_2=13$，牌数竟然变大了，这显然是不可能的）。所以我们要做的就是在牌数为7的这一堆取走6张牌，这样你的对手之后不论怎么取，nim-sum又变成非0了，你再根据这一招将nim-sum变成0，这样你最后肯定是获胜的。<del>怎么样，快去用这招赢弟弟妹妹的压岁钱吧！</del></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
</search>
